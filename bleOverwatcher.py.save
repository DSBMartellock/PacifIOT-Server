#!/usr/bin/env python
#Author: David Martellock
#Date: April 1st 2018
#Purpose: Work Magic with Bluepy on a seperate daemon.

from bluepy import btle
import sys
import binascii
import yaml
import subprocess
import writeYAML as wryml
import async as a


# NOTIFICATION BLE DELEGATE --------------------------------------------------------
# Code from ianharvey.github.io/bluepy-doc/notifications.html
class MyDelegate(btle.DefaultDelegate):
	def __init__(self, params):
		btle.DefaultDelegate.__init__(self)
		#... Initialize here
	
	def handleNotification(self, cHandle, data):
		print cHandle
		try:
			print handlerdict[cHandle] # if handle exists in uuidlist:
			index =  uuidList.index(handlerdict[cHandle])
		except:
			print "Handler :" + cHandle + " Not in handlerdict?"
			sys.exit(0)
					
		print index	

		# ...Run the subroutine to write the characteristic. 
		try:
			#commandstring = "python /var/www/html/writeYAML.py " + index + " " + data
			#print commandstring
			commandstring = str(index)+str(data)
			print str(data)
			
			wryml.writeYaml(str(index)+changeformat(data))
			#subprocess.call(commandstring, shell=True)
						
		except:
			print "some problem with subprocess call to writeYAML.py"
		

		# ... process "data"
def changeformat(data):
	swchr = {
	 "\0" : "0",
	"\x01": "1",
	"\x02": "2",
	"\x03": "3",
	"\x04": "4",
	"\x05": "5",
	"\x06": "6"}	
	return swchr.get(data,"0")

# VARIABLE DECLERATIONS ------------------------------------------------------------
#MAC_ADDR = "54:6C:0E:9B:53:A8"
MAC_ADDR = "54:6C:0E:83:2B:80"


handlerdict = {} #characteristic handle : uuid string
notifyhandlerdict = {} #characteristic handle notification string : notify char


chardict = {} #UUID : characteristic object
VolumeUUID =	 "babe1121-0000-0000-0001-000000000001" # 0-16
NextTrackUUID =	 "babe1122-0000-0000-0001-000000000002" # 0/1
PlayPauseUUID =	 "babe1123-0000-0000-0001-000000000003" # 0/1
ModeUUID =	 "babe1124-0000-0000-0001-000000000004" # 0/1
BrightUUID =	 "babe1125-0000-0000-0001-000000000005" # 0 - 16
ZAccelUUID =	 "babe1131-0000-0000-0002-000000000001" # -127 to 127
uuidList = [VolumeUUID,NextTrackUUID,PlayPauseUUID,ModeUUID,BrightUUID,ZAccelUUID]


charlist = ['char1','char2','char3','char4','char5','char6']


# CONNECT TO DEVICE ---------------------------------------------------------------

try:
	dev = btle.Peripheral(MAC_ADDR)
	dev.withDelegate(MyDelegate(btle.DefaultDelegate))
except:
	# Will throw a "BTLE Exception" if connection fails!
	print "Connection Failed, try power cycle!"
	sys.exit(1)
print "Connected!"


#Set up char connection so can be accessed like chardict[str(uuid)].read/write/ect
for char in dev.getCharacteristics(): # add all characteristics to map
	if str(char.uuid) in uuidList: 
		chardict[str(char.uuid)] = char
		print char.getHandle()

		handlerdict[char.getHandle()] = str(char.uuid)
		print "Attempting to turn on notifications"
		if str(char.uuid) == ZAccelUUID:
			try:
				dev.writeCharacteristic((char.getHandle()+1), b"\x01\x00", withResponse=True)
			except: 
				print "Failed to turn on notifications at handle..."
				print  char.getHandle()
		
	else:
		print "Else called with: " 
		print  char.getHandle()		
	

#for char in handlerdict:
#	print char.getHandle


#set up notifications:



# GET STRING VALUES OF VARIABLES ON MICROCONTROLLER: 
charvaluedict = {} # MC data for comparison
for uuid in chardict:
	charvaluedict[ uuid ] =  str(chardict[uuid].read()) #returns binary version of hex value






# READ YAML DOC --------------------------------------------------------------------
vardict = {} # yaml data for comparison
with open('variables.yml','r') as f:
	vardict = yaml.load(f)
print vardict

# Manually change a value in the yaml file: 
#charvaluedict[VolumeUUID] = str("\x01") # this seems to be 
#== to 1 for the microcontroller. charvaluedict[ModeUUID] = 
#hex(2)

	

# COMPARE YAML VARIABLES TO MICROCONTROLLER VARIABLES -------------------------------
# ... updates MC if not equal
for var in vardict:
	if chardict[var].read() != vardict[var]:
		chardict[var].write(str(vardict[var]))
		charvaluedict[var] = vardict[var]
		print "init Writing " + var



# MAIN LOOP =========================================================================

while True:
	# NOTE: MAY BE PROBLEMS WITH A TIMEOUT
	if dev.waitForNotifications(1.0): # checks for notifications for a second every loop
		#handleNotification() was called
		print "Notification Handler called!" 

	
	print "Waiting..."	
	# print ord(chardict[VolumeUUID].read())
	# here we want to watch the yaml file for any changes:
	with open('variables.yml', 'r') as f:
		vardict = yaml.load(f)
		
	# this is only looking at the yaml and the 
	for var in vardict: 
		if charvaluedict[var] != vardict[var]:
			print "\n vardict[var] value :" + str(vardict[var])
			try:
				if var == NextTrackUUID:
					print " Next Track Attempted Write!"
					# then we need to check if its a zero attempted write, and then just skip this.
					if vardict[var] =="\x01":
						chardict[var].write(vardict[var],True)
						print " Successful Write! Next Track"
					else:
						print "attempted to write a zero to already zero!"

				else:
					chardict[var].write(vardict[var],True)

				
			except:
				print "BTLE EXCEPTION THROWN"
			
			charvaluedict[var] = vardict[var]
			print "\nWriting Successful! " + str(vardict[var])
try:
	dev.disconnect()
except Keboardinterrupt:
	print("cntrl+c Detected!")
	
sys.exit(0)
